ALTER TABLE keyword_translations ADD COLUMN create_timestamp datetime;
ALTER TABLE ixtheo.keyword_translations MODIFY COLUMN create_timestamp datetime DEFAULT NOW();
ALTER TABLE ixtheo.keyword_translations ADD COLUMN id int(10) not null auto_increment primary key;
ALTER TABLE ixtheo.keyword_translations ADD COLUMN prev_version_id int(10);
ALTER TABLE ixtheo.keyword_translations ADD COLUMN next_version_id int(10);
ALTER TABLE ixtheo.keyword_translations DROP INDEX ppn_language_code_status_translator;

ALTER TABLE ixtheo.vufind_translations ADD COLUMN create_timestamp datetime;
ALTER TABLE ixtheo.vufind_translations MODIFY COLUMN create_timestamp datetime DEFAULT NOW();
ALTER TABLE ixtheo.vufind_translations ADD COLUMN id int(10) not null auto_increment primary key;
ALTER TABLE ixtheo.vufind_translations ADD COLUMN prev_version_id int(10);
ALTER TABLE ixtheo.vufind_translations ADD COLUMN next_version_id int(10);
ALTER TABLE ixtheo.vufind_translations DROP INDEX token_language_code;


DROP PROCEDURE IF EXISTS insert_vufind_translation_entry;
#do_not_split_on_semicolons
CREATE PROCEDURE insert_vufind_translation_entry(IN in_token VARCHAR(191), IN in_language_code CHAR(4), IN in_translation VARCHAR(1024), IN in_translator VARCHAR(50))
SQL SECURITY INVOKER
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
          ROLLBACK;
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: statement could not be processed';
    END;

START TRANSACTION;

IF ((SELECT count(*) from vufind_translations WHERE token=in_token AND language_code=in_language_code AND next_version_id is null) > 1) THEN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: more than one possible entry found';
END IF;

SET @old_record_id := (SELECT id
    FROM vufind_translations
    WHERE token=in_token AND language_code=in_language_code AND next_version_id is null);

INSERT INTO vufind_translations (token,language_code,translation,translator,prev_version_id) VALUES (in_token,in_language_code,in_translation,in_translator,@old_record_id);
SET @new_record_id := LAST_INSERT_ID();

UPDATE vufind_translations SET next_version_id=@new_record_id WHERE id=@old_record_id;
COMMIT;

END;
#end_do_not_split_on_semicolons
;




DROP PROCEDURE IF EXISTS insert_keyword_translation_entry;
#do_not_split_on_semicolons
CREATE PROCEDURE insert_keyword_translation_entry(IN in_ppn CHAR(10), IN in_gnd_code CHAR(10), IN in_language_code CHAR(10), IN in_translation VARCHAR(1024), IN in_translator VARCHAR(30))
SQL SECURITY INVOKER
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
          ROLLBACK;
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: statement could not be processed';
    END;

START TRANSACTION;

IF ((SELECT count(*) from keyword_translations WHERE ppn=in_ppn AND gnd_code=in_gnd_code AND language_code=in_language_code AND (status='new' OR status='reliable' OR status='replaced') AND next_version_id is null) > 1) THEN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: more than one possible entry found';
END IF;

SET @old_record_id := (SELECT id
    FROM keyword_translations
    WHERE ppn=in_ppn AND gnd_code=in_gnd_code AND language_code=in_language_code AND (status='new' OR status='reliable' OR status='replaced') AND next_version_id is null);

INSERT INTO keyword_translations (ppn,gnd_code,language_code,translation,origin,status,translator,prev_version_id) VALUES (in_ppn,in_gnd_code,in_language_code,in_translation,150,'new',in_translator,@old_record_id);
SET @new_record_id := LAST_INSERT_ID();

UPDATE keyword_translations SET next_version_id=@new_record_id WHERE id=@old_record_id;
COMMIT;

END;
#end_do_not_split_on_semicolons
;
