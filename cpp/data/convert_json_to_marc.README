This is the documentation for the convert_json_to_marc tool which converts JSON to MARC 21.
This conversion is controlled by an ini file based on our local IniFile class.
The ini file must contain two types of sections, a "Global" section describing various
global settings and one section each for MARC-21 fields that should be mapped from JSON.

1. The "Global" Section
root_path[R]: A prefix for all the paths referencing JSON entities in the MARC-21 field sections.
item_type_tag[O]: If specified, item_type_map must be also specified.  If neither has been specified
    all generated MARC records will of the "undefined" type! (See the LoC MARC-21 Leader documentation
    if you'd like to know what that means.)  If specified the value of root_path plus this will
    indicate the JSON entry which will be used to determine the type of each generated MARC record.
item_type_map[O]: If specified, item_type_tag must be also specified.  This consists of a map where
    each key-value entry is separated from the other key-value by vertical bars.  Keys and values are
    separated by colons.  If you wish to include vertical bars, colons of backslashes in keys or
    values you must backslash-escape them.  You can also use hexadecimal escape sequences in the
    PCRE patterns that look like \xFF.  The values are not arbitray but must be one of
    "book_chapter", "monograph" or "journal article".  If that is not sufficient you need to update
    this documentation and modify convert_json_to_marc.cc to support additional values.
    The ordering of the key-value pairs is significant.  The matching will be attempted in the
    specified order and is case-insensitive.  In order to provide a default fallback in case no
    explicit match succeeds, you can use the trick of adding a final entry with an empty key as
    the empty string will always match.

2. The MARC-21 Field Section
indicator1[O]              = the first indicator for the generated field if it is a data field.  The default is a blank.
indicator2[O]              = the second indicator for the generated field if it is a data field.  The default is a blank.
tag[R]                     = the MARC tag of the MARC field that the extracted JSON will be written to
overflow_tag[O]            = if specified the first value will be stored in a MARC field with tag "tag" and subsequent
                             values are stored in MARC fields with tag "overflow_tag", e.g. 100 and 700 for authors.
normalise_issn             = if true, values of the form XXXX-YYYY will be stored as XXXXYYYY, values that started out
                             without the hyphen will be unaffected.
field_contents_prefix      = used for control fields.  If present the value of this entry will be prepended to
                             the data that will be inserted in the control field
subfield_x                 = used for variable fields; specifies which JSON data will be extracted and inserted
                             into subfield x;
                             There are two variants, the simple one is a JSON extraction path relative to "root_path"
                             in the Global section.  An alternate form look like "map:map_name{json_path}:selector" where
                             "map_name" and "selector" are predefined values.  Currently "map_name" can only take
                             on the value "journal_tites_and_ppns_map" and "selector" can be either "title" or "ppn."
                             "json_path" is the usual JSON extraction path relative to "root_path" in the Global section.
                             If the entry is followed by ",first", which is only valid for array-valued entries, only the
                             first array entry will be used.  If the entry is followed by ",fallback_passthrough", if
                             the mapping fails, the unmapped value will be used.
subfield_x_extraction_regex= if present, this regex will be used to extract data from the JSON data before inserting
                             it into the MARC subfield "x".
dependent_on_y_subfield_x  = This is a rule for generating a subfield x that will only be applied if at least one subfield
                             y has been generated
required                   = the default, if this entry is not present, is "false".  If present and "true", a
                             warning is issued if the referenced JSON data is missing
subfield_x_prefix          = if present, the value of this entry will be prepended to values inserted into
                             subfield "x"
add_fixed_subfield_x       = if subfields are generated at all for a field then the value of this entry will be
                             used to generate an additional subfield "x"
map_to_marc_language_code  = if present, an attempt will be made to map what will be inserted into a subfield
                             to a language code from the MARC standard.  If the mapping fails nothing will be
                             inserted
json_tag                   = only used for control fields, specifies, relative to "root_path" where to extract
                             the data that will be inserted into the control field
repeat_field               = default false, if true, multiple MARC fields may be generated depending on whether
                             repeated JSON data exists

R = required section entry
O = optional section entry
